<?xml version="1.0" encoding="utf-8"?>
<helpItems schema="maml" xmlns="http://msh">
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Add-WinGetSource</command:name>
      <command:verb>Add</command:verb>
      <command:noun>WinGetSource</command:noun>
      <maml:description>
        <maml:para>Adds a new source.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Adds a new source. A source provides the data for you to discover and install packages. Only add a new source if you trust it as a secure location. This command must be executed with administrator permissions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Add-WinGetSource</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
          <maml:name>Argument</maml:name>
          <maml:description>
            <maml:para>The URL or UNC of either a pre-indexed WinGet source or a WinGet REST source API.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name used to identify the WinGet source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
          <maml:name>Type</maml:name>
          <maml:description>
            <maml:para>The type of the WinGet source. Most sources are `Microsoft.Rest`. The WinGet community repository is `Microsoft.PreIndexed.Package`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
        <maml:name>Argument</maml:name>
        <maml:description>
          <maml:para>The URL or UNC of either a pre-indexed WinGet source or a WinGet REST source API.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name used to identify the WinGet source.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
        <maml:name>Type</maml:name>
        <maml:description>
          <maml:para>The type of the WinGet source. Most sources are `Microsoft.Rest`. The WinGet community repository is `Microsoft.PreIndexed.Package`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------- Example 1: Add new REST source named mysource --------</maml:title>
        <dev:code>Add-WinGetSource -Name mysource -Argument https://contoso.com/ -Type Microsoft.Rest</dev:code>
        <dev:remarks>
          <maml:para>This example adds a new REST source to WinGet named `mysource` with the root URL `https://contoso.com/`. The source must respond with the WinGet REST source API.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Remove-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Assert-WinGetPackageManager</command:name>
      <command:verb>Assert</command:verb>
      <command:noun>WinGetPackageManager</command:noun>
      <maml:description>
        <maml:para>Verifies that WinGet is installed properly.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Verifies that WinGet is installed properly.</maml:para>
      <maml:para>&gt; [!NOTE] &gt; The cmdlet doesn't ensure that the latest version of WinGet is installed. It just verifies that &gt; the installed version of Winget is supported by installed version of the Microsoft.WinGet.Client &gt; module.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Assert-WinGetPackageManager</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IncludePreRelease</maml:name>
          <maml:description>
            <maml:para>Include preview versions of WinGet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Latest</maml:name>
          <maml:description>
            <maml:para>Verify that the latest version of WinGet is compatible with the installed version of the Microsoft.WinGet.Client module.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Assert-WinGetPackageManager</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Verify that a specific version of WinGet is installed correctly.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>IncludePreRelease</maml:name>
        <maml:description>
          <maml:para>Include preview versions of WinGet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Latest</maml:name>
        <maml:description>
          <maml:para>Verify that the latest version of WinGet is compatible with the installed version of the Microsoft.WinGet.Client module.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Verify that a specific version of WinGet is installed correctly.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------------- Example 1: Default usage -------------------</maml:title>
        <dev:code>Assert-WinGetPackageManager</dev:code>
        <dev:remarks>
          <maml:para>If the current version of WinGet is installed correctly, the command returns without error.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---- Example 2: Check if latest stable version is installed ----</maml:title>
        <dev:code>Assert-WinGetPackageManager -Latest</dev:code>
        <dev:remarks>
          <maml:para>If the latest version of WinGet is compatible with the installed Microsoft.WinGet.Client module, the command returns without error.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>--- Example 3: Check if latest preview version is installed ---</maml:title>
        <dev:code>Assert-WinGetPackageManager -IncludePreRelease</dev:code>
        <dev:remarks>
          <maml:para>If the prerelease version of WinGet is compatible with the installed Microsoft.WinGet.Client module, the command returns without error.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------ Example 4: Check if specific version is installed ------</maml:title>
        <dev:code>Assert-WinGetPackageManager -Version v1.8.1911</dev:code>
        <dev:remarks>
          <maml:para>If the specified version of WinGet is compatible with the installed Microsoft.WinGet.Client module, the command returns without error.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetVersion</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Disable-WinGetSetting</command:name>
      <command:verb>Disable</command:verb>
      <command:noun>WinGetSetting</command:noun>
      <maml:description>
        <maml:para>Disables an administrative setting.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command disables an administrative setting. The command must be run from an elevated session using the Run as Administrator option.</maml:para>
      <maml:para>This command support the following administrative settings:</maml:para>
      <maml:para>- LocalManifestFiles</maml:para>
      <maml:para>- BypassCertificatePinningForMicrosoftStore</maml:para>
      <maml:para>- InstallerHashOverride</maml:para>
      <maml:para>- LocalArchiveMalwareScanOverride</maml:para>
      <maml:para>- ProxyCommandLineOptions</maml:para>
      <maml:para></maml:para>
      <maml:para>Administrative settings are disabled by default. Administrative settings can also be managed using Group Policy objects.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Disable-WinGetSetting</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the WinGet administrative setting.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the WinGet administrative setting.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------ Example 1: Disable the use of local manifest files ------</maml:title>
        <dev:code>Disable-WinGetSetting -Name LocalManifestFiles</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to disable the use of local manifest files.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Enable-WinGetSetting</command:name>
      <command:verb>Enable</command:verb>
      <command:noun>WinGetSetting</command:noun>
      <maml:description>
        <maml:para>Enables WinGet administrative settings.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command enables an administrative setting. The command must be run from an elevated session using the Run as Administrator option.</maml:para>
      <maml:para>This command support the following administrative settings:</maml:para>
      <maml:para>- LocalManifestFiles</maml:para>
      <maml:para>- BypassCertificatePinningForMicrosoftStore</maml:para>
      <maml:para>- InstallerHashOverride</maml:para>
      <maml:para>- LocalArchiveMalwareScanOverride</maml:para>
      <maml:para>- ProxyCommandLineOptions</maml:para>
      <maml:para></maml:para>
      <maml:para>Administrative settings are disabled by default. Administrative settings can also be managed using Group Policy objects.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Enable-WinGetSetting</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the WinGet administrative setting.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the WinGet administrative setting.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------------------- Example 1 --------------------------</maml:title>
        <dev:code>Enable-WinGetSetting -Name LocalManifestFiles</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to enable the use of local manifest files.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Disable-WinGetSetting</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Export-WinGetPackage</command:name>
      <command:verb>Export</command:verb>
      <command:noun>WinGetPackage</command:noun>
      <maml:description>
        <maml:para>Downloads a WinGet package and its dependencies.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command downloads a WinGet package from a configured source. The command downloads the package, its manifest, as well as its dependencies and their manifests. By default, the packages are downloaded to your `Downloads` folder. You can use the DownloadDirectory parameter to change the location.</maml:para>
      <maml:para>For Microsoft Azure users, if the package is coming from the Microsoft Store, the command also downloads the package license file. The user needs to have one of the following Roles in Azure:</maml:para>
      <maml:para>- Global Administrator</maml:para>
      <maml:para>- User Administrator</maml:para>
      <maml:para>- License Administrator</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Export-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>One or more strings to search for in the WinGet package. The command searches for matching strings in the following properties of the package manifest:</maml:para>
            <maml:para>- `PackageName`</maml:para>
            <maml:para>- `PackageIdentifier`</maml:para>
            <maml:para>- `Moniker`</maml:para>
            <maml:para>- `Tags`</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllowHashMismatch</maml:name>
          <maml:description>
            <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Architecture</maml:name>
          <maml:description>
            <maml:para>Specify the processor architecture for the WinGet package installer.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X86</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X64</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm64</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>DownloadDirectory</maml:name>
          <maml:description>
            <maml:para>Specify the location where you want to store the downloaded files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specify the WinGet package identifier</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>InstallerType</maml:name>
          <maml:description>
            <maml:para>Specify the type of installer package to download. This parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Inno`</maml:para>
            <maml:para>- `Wix`</maml:para>
            <maml:para>- `Msi`</maml:para>
            <maml:para>- `Nullsoft`</maml:para>
            <maml:para>- `Zip`</maml:para>
            <maml:para>- `Msix`</maml:para>
            <maml:para>- `Exe`</maml:para>
            <maml:para>- `Burn`</maml:para>
            <maml:para>- `MSStore`</maml:para>
            <maml:para>- `Portable`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer type must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Inno</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Wix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msi</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Nullsoft</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Zip</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Exe</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Burn</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">MSStore</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Portable</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Locale</maml:name>
          <maml:description>
            <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
            <maml:para>&gt; [!NOTE] &gt; The locale must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>MatchOption</maml:name>
          <maml:description>
            <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values:</maml:para>
            <maml:para>- `Equals`</maml:para>
            <maml:para>- `EqualsCaseInsensitive`</maml:para>
            <maml:para>- `StartsWithCaseInsensitive`</maml:para>
            <maml:para>- `ContainsCaseInsensitive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Equals</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">EqualsCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">StartsWithCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">ContainsCaseInsensitive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Moniker</maml:name>
          <maml:description>
            <maml:para>Specify the moniker of the WinGet package to download. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the WinGet package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
            <maml:para>- `Any`</maml:para>
            <maml:para>- `User`</maml:para>
            <maml:para>- `System`</maml:para>
            <maml:para>- `UserOrUnknown`</maml:para>
            <maml:para>- `SystemOrUnknown`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Any</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">User</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">System</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">UserOrUnknown</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">SystemOrUnknown</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipDependencies</maml:name>
          <maml:description>
            <maml:para>Specifies that the command shouldn't download the WinGet package dependencies.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specifies WinGet source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specifies the version of the WinGet package to download.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Export-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
          <maml:name>PSCatalogPackage</maml:name>
          <maml:description>
            <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` command.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllowHashMismatch</maml:name>
          <maml:description>
            <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Architecture</maml:name>
          <maml:description>
            <maml:para>Specify the processor architecture for the WinGet package installer.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X86</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X64</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm64</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>DownloadDirectory</maml:name>
          <maml:description>
            <maml:para>Specify the location where you want to store the downloaded files.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>InstallerType</maml:name>
          <maml:description>
            <maml:para>Specify the type of installer package to download. This parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Inno`</maml:para>
            <maml:para>- `Wix`</maml:para>
            <maml:para>- `Msi`</maml:para>
            <maml:para>- `Nullsoft`</maml:para>
            <maml:para>- `Zip`</maml:para>
            <maml:para>- `Msix`</maml:para>
            <maml:para>- `Exe`</maml:para>
            <maml:para>- `Burn`</maml:para>
            <maml:para>- `MSStore`</maml:para>
            <maml:para>- `Portable`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer type must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Inno</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Wix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msi</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Nullsoft</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Zip</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Exe</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Burn</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">MSStore</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Portable</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Locale</maml:name>
          <maml:description>
            <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
            <maml:para>&gt; [!NOTE] &gt; The locale must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
            <maml:para>- `Any`</maml:para>
            <maml:para>- `User`</maml:para>
            <maml:para>- `System`</maml:para>
            <maml:para>- `UserOrUnknown`</maml:para>
            <maml:para>- `SystemOrUnknown`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Any</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">User</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">System</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">UserOrUnknown</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">SystemOrUnknown</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipDependencies</maml:name>
          <maml:description>
            <maml:para>Specifies that the command shouldn't download the WinGet package dependencies.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specifies the version of the WinGet package to download.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>AllowHashMismatch</maml:name>
        <maml:description>
          <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Architecture</maml:name>
        <maml:description>
          <maml:para>Specify the processor architecture for the WinGet package installer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>DownloadDirectory</maml:name>
        <maml:description>
          <maml:para>Specify the location where you want to store the downloaded files.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specify the WinGet package identifier</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>InstallerType</maml:name>
        <maml:description>
          <maml:para>Specify the type of installer package to download. This parameter accepts the following values:</maml:para>
          <maml:para>- `Default`</maml:para>
          <maml:para>- `Inno`</maml:para>
          <maml:para>- `Wix`</maml:para>
          <maml:para>- `Msi`</maml:para>
          <maml:para>- `Nullsoft`</maml:para>
          <maml:para>- `Zip`</maml:para>
          <maml:para>- `Msix`</maml:para>
          <maml:para>- `Exe`</maml:para>
          <maml:para>- `Burn`</maml:para>
          <maml:para>- `MSStore`</maml:para>
          <maml:para>- `Portable`</maml:para>
          <maml:para></maml:para>
          <maml:para>&gt; [!NOTE] &gt; The installer type must be available in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Locale</maml:name>
        <maml:description>
          <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
          <maml:para>&gt; [!NOTE] &gt; The locale must be available in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>MatchOption</maml:name>
        <maml:description>
          <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values:</maml:para>
          <maml:para>- `Equals`</maml:para>
          <maml:para>- `EqualsCaseInsensitive`</maml:para>
          <maml:para>- `StartsWithCaseInsensitive`</maml:para>
          <maml:para>- `ContainsCaseInsensitive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Moniker</maml:name>
        <maml:description>
          <maml:para>Specify the moniker of the WinGet package to download. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the WinGet package.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
        <maml:name>PSCatalogPackage</maml:name>
        <maml:description>
          <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` command.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>One or more strings to search for in the WinGet package. The command searches for matching strings in the following properties of the package manifest:</maml:para>
          <maml:para>- `PackageName`</maml:para>
          <maml:para>- `PackageIdentifier`</maml:para>
          <maml:para>- `Moniker`</maml:para>
          <maml:para>- `Tags`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
          <maml:para>- `Any`</maml:para>
          <maml:para>- `User`</maml:para>
          <maml:para>- `System`</maml:para>
          <maml:para>- `UserOrUnknown`</maml:para>
          <maml:para>- `SystemOrUnknown`</maml:para>
          <maml:para></maml:para>
          <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SkipDependencies</maml:name>
        <maml:description>
          <maml:para>Specifies that the command shouldn't download the WinGet package dependencies.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specifies WinGet source.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Specifies the version of the WinGet package to download.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSDownloadResult</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>Example 1: Download Microsoft.PowerShell to the default location</maml:title>
        <dev:code>Export-WinGetPackage -Id Microsoft.PowerShell

Id                   Name       Source Status ExtendedErrorCode CorrelationData
--                   ----       ------ ------ ----------------- ---------------
Microsoft.PowerShell PowerShell winget Ok

dir ~\Downloads\Microsoft.PowerShell_7.4.4.0

Directory: C:\Users\user1\Downloads\Microsoft.PowerShell_7.4.4.0

Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a---            8/7/2024  2:05 PM      108404736 PowerShell_7.4.4.0_Machine_X64_wix_en-US.msi
-a---            8/7/2024  2:05 PM           3838 PowerShell_7.4.4.0_Machine_X64_wix_en-US.yaml</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to download a package for the current machine and scope. For this example, the command downloads the latest version of the installer package and manifest for Microsoft.PowerShell. The command puts the files a new folder in your `Downloads` location. The folder name is created by concatenating the package identifier and version number.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Find-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Find-WinGetPackage</command:name>
      <command:verb>Find</command:verb>
      <command:noun>WinGetPackage</command:noun>
      <maml:description>
        <maml:para>Searches for packages from configured sources.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Searches for packages from configured sources.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Find-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties: - `PackageIdentifier`</maml:para>
            <maml:para>- `PackageName`</maml:para>
            <maml:para>- `Moniker`</maml:para>
            <maml:para>- `Tags`</maml:para>
            <maml:para></maml:para>
            <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Command</maml:name>
          <maml:description>
            <maml:para>Specify the name of the command defined in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Count</maml:name>
          <maml:description>
            <maml:para>Specify the maximum number of results to return.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.UInt32</command:parameterValue>
          <dev:type>
            <maml:name>System.UInt32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specify the package identifier to search for. By default, the command does a case-insensitive substring match.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>MatchOption</maml:name>
          <maml:description>
            <maml:para>Specify matching logic used for search. The parameter accepts the following values:</maml:para>
            <maml:para>- `Equals`</maml:para>
            <maml:para>- `EqualsCaseInsensitive`</maml:para>
            <maml:para>- `StartsWithCaseInsensitive`</maml:para>
            <maml:para>- `ContainsCaseInsensitive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Equals</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">EqualsCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">StartsWithCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">ContainsCaseInsensitive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Moniker</maml:name>
          <maml:description>
            <maml:para>Specify the moniker of the package you are searching for.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the package to search for.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specify the name of the WinGet source to search. The most common sources are `msstore` and `winget`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Specify a package tag to search for.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Command</maml:name>
        <maml:description>
          <maml:para>Specify the name of the command defined in the package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Count</maml:name>
        <maml:description>
          <maml:para>Specify the maximum number of results to return.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.UInt32</command:parameterValue>
        <dev:type>
          <maml:name>System.UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specify the package identifier to search for. By default, the command does a case-insensitive substring match.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>MatchOption</maml:name>
        <maml:description>
          <maml:para>Specify matching logic used for search. The parameter accepts the following values:</maml:para>
          <maml:para>- `Equals`</maml:para>
          <maml:para>- `EqualsCaseInsensitive`</maml:para>
          <maml:para>- `StartsWithCaseInsensitive`</maml:para>
          <maml:para>- `ContainsCaseInsensitive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Moniker</maml:name>
        <maml:description>
          <maml:para>Specify the moniker of the package you are searching for.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the package to search for.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties: - `PackageIdentifier`</maml:para>
          <maml:para>- `PackageName`</maml:para>
          <maml:para>- `Moniker`</maml:para>
          <maml:para>- `Tags`</maml:para>
          <maml:para></maml:para>
          <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specify the name of the WinGet source to search. The most common sources are `msstore` and `winget`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Specify a package tag to search for.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.UInt32</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSFoundCatalogPackage</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------------- Example 1: Search for PowerShell ---------------</maml:title>
        <dev:code>Find-WinGetPackage PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to search for packages related to PowerShell. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties:</maml:para>
          <maml:para>- `PackageIdentifier`</maml:para>
          <maml:para>- `PackageName`</maml:para>
          <maml:para>- `Moniker`</maml:para>
          <maml:para>- `Tags`</maml:para>
          <maml:para></maml:para>
          <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------- Example 2: Search for Microsoft.PowerShell by id -------</maml:title>
        <dev:code>Find-WinGetPackage -Id Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to search for packages by package identifier. By default, the command searches all configured sources. The command performs a case-insensitive substring match against the PackageIdentifier property of the packages.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---- Example 3: Search for Microsoft.PowerShell by exact id ----</maml:title>
        <dev:code>Find-WinGetPackage -Id Microsoft.PowerShell -MatchOption Equals</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to search for packages by exact package identifier. By default, the command searches all configured sources. The command performs a case-sensitive full text match against the PackageIdentifier property of the packages.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Export-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Install-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WinGetPackage</command:name>
      <command:verb>Get</command:verb>
      <command:noun>WinGetPackage</command:noun>
      <maml:description>
        <maml:para>Lists installed packages.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command lists all of the packages installed on your system. The output includes packages installed from WinGet sources and packages installed by other methods. Packages that have package identifiers starting with `MSIX` or `ARP` were not installed from a WinGet source.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties:</maml:para>
            <maml:para>- `PackageIdentifier`</maml:para>
            <maml:para>- `PackageName`</maml:para>
            <maml:para>- `Moniker`</maml:para>
            <maml:para>- `Tags`</maml:para>
            <maml:para></maml:para>
            <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Command</maml:name>
          <maml:description>
            <maml:para>Specify the name of the command defined in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Count</maml:name>
          <maml:description>
            <maml:para>Limits the number of items returned by the command.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.UInt32</command:parameterValue>
          <dev:type>
            <maml:name>System.UInt32</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specify the package identifier for the package you want to list. By default, the command does a case-insensitive substring comparison on the package identifier.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>MatchOption</maml:name>
          <maml:description>
            <maml:para>Specify matching logic used for search. The parameter accepts the following values:</maml:para>
            <maml:para>- `Equals`</maml:para>
            <maml:para>- `EqualsCaseInsensitive`</maml:para>
            <maml:para>- `StartsWithCaseInsensitive`</maml:para>
            <maml:para>- `ContainsCaseInsensitive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Equals</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">EqualsCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">StartsWithCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">ContainsCaseInsensitive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Moniker</maml:name>
          <maml:description>
            <maml:para>Specify the moniker of the package you want to list.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the package to list. By default, the command does a case-insensitive comparison of the package name.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specify the name of the WinGet source of the package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Tag</maml:name>
          <maml:description>
            <maml:para>Specify a package tag to search for.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Command</maml:name>
        <maml:description>
          <maml:para>Specify the name of the command defined in the package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Count</maml:name>
        <maml:description>
          <maml:para>Limits the number of items returned by the command.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.UInt32</command:parameterValue>
        <dev:type>
          <maml:name>System.UInt32</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specify the package identifier for the package you want to list. By default, the command does a case-insensitive substring comparison on the package identifier.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>MatchOption</maml:name>
        <maml:description>
          <maml:para>Specify matching logic used for search. The parameter accepts the following values:</maml:para>
          <maml:para>- `Equals`</maml:para>
          <maml:para>- `EqualsCaseInsensitive`</maml:para>
          <maml:para>- `StartsWithCaseInsensitive`</maml:para>
          <maml:para>- `ContainsCaseInsensitive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Moniker</maml:name>
        <maml:description>
          <maml:para>Specify the moniker of the package you want to list.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the package to list. By default, the command does a case-insensitive comparison of the package name.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties:</maml:para>
          <maml:para>- `PackageIdentifier`</maml:para>
          <maml:para>- `PackageName`</maml:para>
          <maml:para>- `Moniker`</maml:para>
          <maml:para>- `Tags`</maml:para>
          <maml:para></maml:para>
          <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specify the name of the WinGet source of the package.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Tag</maml:name>
        <maml:description>
          <maml:para>Specify a package tag to search for.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.UInt32</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSInstalledCatalogPackage</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------------ Example 1: Default example ------------------</maml:title>
        <dev:code>Get-WinGetPackage</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to list all packages installed on your system.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Uninstall-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Update-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WinGetSettings</command:name>
      <command:verb>Get</command:verb>
      <command:noun>WinGetSettings</command:noun>
      <maml:description>
        <maml:para>Gets WinGet configuration settings.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command gets the WinGet configuration settings. The settings include: - the schema</maml:para>
      <maml:para>- administrative settings</maml:para>
      <maml:para>- the location of the user settings file</maml:para>
      <maml:para>For more information about WinGet settings, see WinGet CLI Settings (https://aka.ms/winget-settings).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WinGetSettings</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AsPlainText</maml:name>
          <maml:description>
            <maml:para>Output results as plain text</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>AsPlainText</maml:name>
        <maml:description>
          <maml:para>Output results as plain text</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>---- Example 1 - Display the WinGet configuration settings ----</maml:title>
        <dev:code>Get-WinGetSettings

Name              Value
----              -----
$schema           https://aka.ms/winget-settings-export.schema.json
userSettingsFile  C:\Users\user1\AppData\Local\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\Local…
adminSettings     {[ProxyCommandLineOptions, False], [LocalArchiveMalwareScanOverride, False], [InstallerH…</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>Example 2 - Display the administrative settings in WinGet configuration</maml:title>
        <dev:code>Get-WinGetSettings | Select-Object -ExpandProperty adminSettings

Name                                      Value
----                                      -----
InstallerHashOverride                     False
ProxyCommandLineOptions                   False
BypassCertificatePinningForMicrosoftStore False
LocalArchiveMalwareScanOverride           False
LocalManifestFiles                        True</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WinGetSource</command:name>
      <command:verb>Get</command:verb>
      <command:noun>WinGetSource</command:noun>
      <maml:description>
        <maml:para>Lists configured WinGet sources.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Lists the configured WinGet sources.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WinGetSource</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the WinGet source to be displayed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the WinGet source to be displayed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSSourceResult</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------- Example 1: List all configured WinGet sources --------</maml:title>
        <dev:code>Get-WinGetSource

Name    Argument                                      Type
----    --------                                      ----
msstore https://storeedgefd.dsx.mp.microsoft.com/v9.0 Microsoft.Rest
winget  https://cdn.winget.microsoft.com/cache        Microsoft.PreIndexed.Package</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Add-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WinGetUserSettings</command:name>
      <command:verb>Get</command:verb>
      <command:noun>WinGetUserSettings</command:noun>
      <maml:description>
        <maml:para>Gets user settings for WinGet.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command displays the WinGet settings for the current user. The settings are stored in `$env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json`. This file only exists if you have changed a user setting, for example, using the `Set-WinGetUserSettings` command.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WinGetUserSettings</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--- Example 1: Get the WinGet settings for the current user ---</maml:title>
        <dev:code>Get-WinGetUserSettings</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Get-WinGetVersion</command:name>
      <command:verb>Get</command:verb>
      <command:noun>WinGetVersion</command:noun>
      <maml:description>
        <maml:para>Gets the installed version of WinGet.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Gets the installed version of WinGet.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Get-WinGetVersion</maml:name>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters />
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>None</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------------ Example 1: Default example ------------------</maml:title>
        <dev:code>Get-WinGetVersion</dev:code>
        <dev:remarks>
          <maml:para>Gets the installed version of WinGet.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks />
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Install-WinGetPackage</command:name>
      <command:verb>Install</command:verb>
      <command:noun>WinGetPackage</command:noun>
      <maml:description>
        <maml:para>Installs a WinGet Package.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command installs a WinGet package from a configured source. The command includes parameters to specify values used to search for packages in the configured sources. By default, the command searches all sources. By default, all string-based searches are case-insensitive substring searches. Wildcards are not supported. You can change the search behavior using the MatchOption parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Install-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties: 	- `PackageIdentifier` 	- `PackageName` 	- `Moniker` 	- `Tags`</maml:para>
            <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllowHashMismatch</maml:name>
          <maml:description>
            <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Architecture</maml:name>
          <maml:description>
            <maml:para>Specify the processor architecture for the WinGet package installer.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X86</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X64</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm64</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Custom</maml:name>
          <maml:description>
            <maml:para>Use this parameter to pass additional arguments to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string is added to the arguments defined in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Force the installer to run even when other checks WinGet would perform would prevent this action.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Header</maml:name>
          <maml:description>
            <maml:para>Custom value to be passed via HTTP header to WinGet REST sources.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specify the package identifier to search for. The command does a case-insensitive full text match, rather than a substring match.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>InstallerType</maml:name>
          <maml:description>
            <maml:para>A package may contain multiple installer types. Use this parameter to select the installer you want to use. The parameter accepts the following values: - `Default`</maml:para>
            <maml:para>- `Inno`</maml:para>
            <maml:para>- `Wix`</maml:para>
            <maml:para>- `Msi`</maml:para>
            <maml:para>- `Nullsoft`</maml:para>
            <maml:para>- `Zip`</maml:para>
            <maml:para>- `Msix`</maml:para>
            <maml:para>- `Exe`</maml:para>
            <maml:para>- `Burn`</maml:para>
            <maml:para>- `MSStore`</maml:para>
            <maml:para>- `Portable`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Inno</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Wix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msi</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Nullsoft</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Zip</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Exe</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Burn</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">MSStore</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Portable</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Locale</maml:name>
          <maml:description>
            <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Location</maml:name>
          <maml:description>
            <maml:para>Specify the file path where you want the packed to be installed. The installer must be able to support alternate install locations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Log</maml:name>
          <maml:description>
            <maml:para>Specify the location for the installer log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>MatchOption</maml:name>
          <maml:description>
            <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values: - `Equals`</maml:para>
            <maml:para>- `EqualsCaseInsensitive`</maml:para>
            <maml:para>- `StartsWithCaseInsensitive`</maml:para>
            <maml:para>- `ContainsCaseInsensitive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Equals</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">EqualsCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">StartsWithCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">ContainsCaseInsensitive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mode</maml:name>
          <maml:description>
            <maml:para>Specify the output mode for the installer. The parameter accepts the following values: - `Default`</maml:para>
            <maml:para>- `Silent`</maml:para>
            <maml:para>- `Interactive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Silent</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Interactive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Moniker</maml:name>
          <maml:description>
            <maml:para>Specify the moniker of the WinGet package to install. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the package to be installed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Override</maml:name>
          <maml:description>
            <maml:para>Use this parameter to override the existing arguments passed to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string overrides the arguments specified in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
            <maml:para>- `Any`</maml:para>
            <maml:para>- `User`</maml:para>
            <maml:para>- `System`</maml:para>
            <maml:para>- `UserOrUnknown`</maml:para>
            <maml:para>- `SystemOrUnknown`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Any</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">User</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">System</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">UserOrUnknown</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">SystemOrUnknown</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipDependencies</maml:name>
          <maml:description>
            <maml:para>Specifies that the command shouldn't install the WinGet package dependencies.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specify the name of the WinGet source from which the package should be installed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specify the version of the package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Install-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
          <maml:name>PSCatalogPackage</maml:name>
          <maml:description>
            <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` command.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllowHashMismatch</maml:name>
          <maml:description>
            <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Architecture</maml:name>
          <maml:description>
            <maml:para>Specify the processor architecture for the WinGet package installer.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X86</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X64</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm64</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Custom</maml:name>
          <maml:description>
            <maml:para>Use this parameter to pass additional arguments to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string is added to the arguments defined in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Force the installer to run even when other checks WinGet would perform would prevent this action.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Header</maml:name>
          <maml:description>
            <maml:para>Custom value to be passed via HTTP header to WinGet REST sources.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>InstallerType</maml:name>
          <maml:description>
            <maml:para>A package may contain multiple installer types. Use this parameter to select the installer you want to use. The parameter accepts the following values: - `Default`</maml:para>
            <maml:para>- `Inno`</maml:para>
            <maml:para>- `Wix`</maml:para>
            <maml:para>- `Msi`</maml:para>
            <maml:para>- `Nullsoft`</maml:para>
            <maml:para>- `Zip`</maml:para>
            <maml:para>- `Msix`</maml:para>
            <maml:para>- `Exe`</maml:para>
            <maml:para>- `Burn`</maml:para>
            <maml:para>- `MSStore`</maml:para>
            <maml:para>- `Portable`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Inno</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Wix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msi</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Nullsoft</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Zip</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Exe</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Burn</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">MSStore</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Portable</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Locale</maml:name>
          <maml:description>
            <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Location</maml:name>
          <maml:description>
            <maml:para>Specify the file path where you want the packed to be installed. The installer must be able to support alternate install locations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Log</maml:name>
          <maml:description>
            <maml:para>Specify the location for the installer log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mode</maml:name>
          <maml:description>
            <maml:para>Specify the output mode for the installer. The parameter accepts the following values: - `Default`</maml:para>
            <maml:para>- `Silent`</maml:para>
            <maml:para>- `Interactive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Silent</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Interactive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Override</maml:name>
          <maml:description>
            <maml:para>Use this parameter to override the existing arguments passed to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string overrides the arguments specified in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
            <maml:para>- `Any`</maml:para>
            <maml:para>- `User`</maml:para>
            <maml:para>- `System`</maml:para>
            <maml:para>- `UserOrUnknown`</maml:para>
            <maml:para>- `SystemOrUnknown`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Any</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">User</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">System</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">UserOrUnknown</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">SystemOrUnknown</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipDependencies</maml:name>
          <maml:description>
            <maml:para>Specifies that the command shouldn't install the WinGet package dependencies.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specify the version of the package.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>AllowHashMismatch</maml:name>
        <maml:description>
          <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Architecture</maml:name>
        <maml:description>
          <maml:para>Specify the processor architecture for the WinGet package installer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Custom</maml:name>
        <maml:description>
          <maml:para>Use this parameter to pass additional arguments to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string is added to the arguments defined in the package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Force the installer to run even when other checks WinGet would perform would prevent this action.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Header</maml:name>
        <maml:description>
          <maml:para>Custom value to be passed via HTTP header to WinGet REST sources.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specify the package identifier to search for. The command does a case-insensitive full text match, rather than a substring match.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>InstallerType</maml:name>
        <maml:description>
          <maml:para>A package may contain multiple installer types. Use this parameter to select the installer you want to use. The parameter accepts the following values: - `Default`</maml:para>
          <maml:para>- `Inno`</maml:para>
          <maml:para>- `Wix`</maml:para>
          <maml:para>- `Msi`</maml:para>
          <maml:para>- `Nullsoft`</maml:para>
          <maml:para>- `Zip`</maml:para>
          <maml:para>- `Msix`</maml:para>
          <maml:para>- `Exe`</maml:para>
          <maml:para>- `Burn`</maml:para>
          <maml:para>- `MSStore`</maml:para>
          <maml:para>- `Portable`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Locale</maml:name>
        <maml:description>
          <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Location</maml:name>
        <maml:description>
          <maml:para>Specify the file path where you want the packed to be installed. The installer must be able to support alternate install locations.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Log</maml:name>
        <maml:description>
          <maml:para>Specify the location for the installer log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>MatchOption</maml:name>
        <maml:description>
          <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values: - `Equals`</maml:para>
          <maml:para>- `EqualsCaseInsensitive`</maml:para>
          <maml:para>- `StartsWithCaseInsensitive`</maml:para>
          <maml:para>- `ContainsCaseInsensitive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Mode</maml:name>
        <maml:description>
          <maml:para>Specify the output mode for the installer. The parameter accepts the following values: - `Default`</maml:para>
          <maml:para>- `Silent`</maml:para>
          <maml:para>- `Interactive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Moniker</maml:name>
        <maml:description>
          <maml:para>Specify the moniker of the WinGet package to install. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the package to be installed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Override</maml:name>
        <maml:description>
          <maml:para>Use this parameter to override the existing arguments passed to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string overrides the arguments specified in the package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
        <maml:name>PSCatalogPackage</maml:name>
        <maml:description>
          <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` command.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. The command compares the value provided to the following package manifest properties: 	- `PackageIdentifier` 	- `PackageName` 	- `Moniker` 	- `Tags`</maml:para>
          <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
          <maml:para>- `Any`</maml:para>
          <maml:para>- `User`</maml:para>
          <maml:para>- `System`</maml:para>
          <maml:para>- `UserOrUnknown`</maml:para>
          <maml:para>- `SystemOrUnknown`</maml:para>
          <maml:para></maml:para>
          <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SkipDependencies</maml:name>
        <maml:description>
          <maml:para>Specifies that the command shouldn't install the WinGet package dependencies.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specify the name of the WinGet source from which the package should be installed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Specify the version of the package.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSInstallResult</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>---------- Example 1: Install a package using a query ----------</maml:title>
        <dev:code>Install-WinGetPackage Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example show how to install a package using a query. The Query parameter is positional, so you don't need to include the parameter name before the query string.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------- Example 2: Install a package by Id --------------</maml:title>
        <dev:code>Install-WinGetPackage -Id Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to install a package by the specifying the package identifier. If the package identifier is available from more than one source, you must provide additional search criteria to select a specific instance of the package.</maml:para>
          <maml:para>&gt; If more than one source is configured with the same package identifier, the user must disambiguate</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 3: Install a package by Name -------------</maml:title>
        <dev:code>Install-WinGetPackage -Name "PowerToys (Preview)"</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to install a package by specifying the package name.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------ Example 4: Install a specific version of a package ------</maml:title>
        <dev:code>Install-WinGetPackage Microsoft.PowerShell -Version 7.4.4.0</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to install a specific version of a package using a query. The command does a query search for packages matching `Microsoft.PowerShell`. The results of the search a limited to matches with the version of `7.4.4.0`.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Find-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Update-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Uninstall-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Remove-WinGetSource</command:name>
      <command:verb>Remove</command:verb>
      <command:noun>WinGetSource</command:noun>
      <maml:description>
        <maml:para>Removes a configured source.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command removes a configured WinGet source. By default, there are two sources registered: `msstore` and `winget`. You can add more sources using `Add-WinGetSource`. This command must be executed with administrator permissions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Remove-WinGetSource</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the source to be removed.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the source to be removed.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>---------- Example 1: Remove a single source by name ----------</maml:title>
        <dev:code>Remove-WinGetSource -Name msstore</dev:code>
        <dev:remarks>
          <maml:para>The example shows how to remove a WinGet source by name.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Add-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Reset-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Repair-WinGetPackageManager</command:name>
      <command:verb>Repair</command:verb>
      <command:noun>WinGetPackageManager</command:noun>
      <maml:description>
        <maml:para>Repairs the installation of the WinGet client on your computer.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command repairs the installation of the WinGet client on your computer by installing the specified version or the latest version of the client. This command can also install the WinGet  client if it is not already installed on your machine. It ensures that the client is installed  in a working state.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Repair-WinGetPackageManager</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>Use this parameter to repair the WinGet client for all user accounts on the computer. The command must run the command with administrator permissions.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>The Force parameter shuts down the version that is currently running so that it can update the application files.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IncludePreRelease</maml:name>
          <maml:description>
            <maml:para>Use this parameter to include prerelease versions of the WinGet client.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Latest</maml:name>
          <maml:description>
            <maml:para>Use this parameter to install the latest available version of the WinGet client.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Repair-WinGetPackageManager</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllUsers</maml:name>
          <maml:description>
            <maml:para>Use this parameter to repair the WinGet client for all user accounts on the computer. The command must run the command with administrator permissions.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>The Force parameter shuts down the version that is currently running so that it can update the application files.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Use this parameter to specify the specific version of the WinGet client to install.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>AllUsers</maml:name>
        <maml:description>
          <maml:para>Use this parameter to repair the WinGet client for all user accounts on the computer. The command must run the command with administrator permissions.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>The Force parameter shuts down the version that is currently running so that it can update the application files.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>IncludePreRelease</maml:name>
        <maml:description>
          <maml:para>Use this parameter to include prerelease versions of the WinGet client.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Latest</maml:name>
        <maml:description>
          <maml:para>Use this parameter to install the latest available version of the WinGet client.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Use this parameter to specify the specific version of the WinGet client to install.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Int32</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------- Example 1: Repair the WinGet client -------------</maml:title>
        <dev:code>Repair-WinGetPackageManager</dev:code>
        <dev:remarks>
          <maml:para>Ensures that the current installed version of WinGet is functioning properly.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>--------- Example 2: Force install the latest version ---------</maml:title>
        <dev:code>Repair-WinGetPackageManager -Latest -Force</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to repair they WinGet client by installing the latest version and ensuring it functions properly. The Force parameter shuts down the version that is currently running so that it can update the application files.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetVersion</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Reset-WinGetSource</command:name>
      <command:verb>Reset</command:verb>
      <command:noun>WinGetSource</command:noun>
      <maml:description>
        <maml:para>Resets WinGet sources.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>Resets a named WinGet source by removing the source configuration. You can reset all configured sources and add the default source configurations using the All switch parameter. This command must be executed with administrator permissions.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Reset-WinGetSource</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>All</maml:name>
          <maml:description>
            <maml:para>Reset all sources and add the default sources.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Reset-WinGetSource</maml:name>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>The name of the source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>All</maml:name>
        <maml:description>
          <maml:para>Reset all sources and add the default sources.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>The name of the source.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Object</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>------------- Example 1: Reset the msstore source -------------</maml:title>
        <dev:code>Reset-WinGetSource -Name msstore</dev:code>
        <dev:remarks>
          <maml:para>This example resets the configured source named 'msstore' by removing it.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----------------- Example 2: Reset all sources -----------------</maml:title>
        <dev:code>Reset-WinGetSource -All</dev:code>
        <dev:remarks>
          <maml:para>This example resets all configured sources and adds the default sources.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Add-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Remove-WinGetSource</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Set-WinGetUserSettings</command:name>
      <command:verb>Set</command:verb>
      <command:noun>WinGetUserSettings</command:noun>
      <maml:description>
        <maml:para>Sets configuration settings of the WinGet client for the current user.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command sets configuration settings of the WinGet client for the current user. The user settings file doesn't exist until you set a specific value. The file is stored in `$env:LOCALAPPDATA\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\LocalState\settings.json`. For more information about WinGet settings, see WinGet CLI Settings (https://aka.ms/winget-settings).</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Set-WinGetUserSettings</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Merge</maml:name>
          <maml:description>
            <maml:para>By default, the command overwrites the current setting with the values provided. Use this parameter to append the new settings to the existing configuration.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>UserSettings</maml:name>
          <maml:description>
            <maml:para>A hashtable containing the key value pairs representing the WinGet settings.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable</command:parameterValue>
          <dev:type>
            <maml:name>System.Collections.Hashtable</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Merge</maml:name>
        <maml:description>
          <maml:para>By default, the command overwrites the current setting with the values provided. Use this parameter to append the new settings to the existing configuration.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>UserSettings</maml:name>
        <maml:description>
          <maml:para>A hashtable containing the key value pairs representing the WinGet settings.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable</command:parameterValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>-------------- Example 1: Set progress bar theme --------------</maml:title>
        <dev:code>Set-WinGetUserSettings -UserSettings @{
    visual = @{
        progressBar = 'rainbow'
    }
}</dev:code>
        <dev:remarks>
          <maml:para>Sets the theme of the progress bar to rainbow.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---------- Example 2: Merge install behavior settings ----------</maml:title>
        <dev:code>Set-WinGetUserSettings  -Merge -UserSettings @{
    installBehavior = @{
        preferences = @{
            scope = 'user'
        }
    }
}</dev:code>
        <dev:remarks>
          <maml:para>Appends the user scope preference setting to the existing WinGet settings configuration.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 3: Change multiple settings -------------</maml:title>
        <dev:code>Set-WinGetUserSettings -UserSettings @{
    visual = @{
        progressBar = 'rainbow'
        anonymizeDisplayedPaths = $true
    }
}</dev:code>
        <dev:remarks>
          <maml:para></maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Test-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Test-WinGetUserSettings</command:name>
      <command:verb>Test</command:verb>
      <command:noun>WinGetUserSettings</command:noun>
      <maml:description>
        <maml:para>Tests the current state of WinGet user settings.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command tests the current state of WinGet user settings against a provided set of values.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Test-WinGetUserSettings</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IgnoreNotSet</maml:name>
          <maml:description>
            <maml:para>When you use the IgnoreNotSet parameter, the command only tests the provide values and doesn't include other WinGet settings in the comparison.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>UserSettings</maml:name>
          <maml:description>
            <maml:para>A hashtable containing the key value pairs representing the WinGet settings.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable</command:parameterValue>
          <dev:type>
            <maml:name>System.Collections.Hashtable</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>IgnoreNotSet</maml:name>
        <maml:description>
          <maml:para>When you use the IgnoreNotSet parameter, the command only tests the provide values and doesn't include other WinGet settings in the comparison.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="true" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>UserSettings</maml:name>
        <maml:description>
          <maml:para>A hashtable containing the key value pairs representing the WinGet settings.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Collections.Hashtable</command:parameterValue>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Collections.Hashtable</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>System.Boolean</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------------- Example 1: Test for exact match ---------------</maml:title>
        <dev:code>Test-WinGetUserSettings -UserSettings @{
    installBehavior = @{
        preferences = @{
            scope = 'user'
        }
    }
}</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to confirm that your current user settings match specific values. The command returns `$false` if it is not an exact match.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>---------- Example 2: Test only progress bar setting ----------</maml:title>
        <dev:code>Test-WinGetUserSettings -IgnoreNotSet -UserSettings @{
    visual = @{
        progressBar = 'rainbow'
    }
}</dev:code>
        <dev:remarks>
          <maml:para>This examples tests whether the progress bar theme is set to `rainbow`. When you use the IgnoreNotSet parameter, the command only tests the provide values and doesn't include other WinGet settings in the comparison.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Set-WinGetUserSettings</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Uninstall-WinGetPackage</command:name>
      <command:verb>Uninstall</command:verb>
      <command:noun>WinGetPackage</command:noun>
      <maml:description>
        <maml:para>Uninstalls a WinGet Package.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command uninstalls a WinGet package from your computer. The command includes parameters to specify values used to search for installed packages. By default, all string-based searches are case-insensitive substring searches. Wildcards are not supported. You can change the search behavior using the MatchOption parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Uninstall-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. Wildcards are not supported. The command compares the value provided to the following package manifest properties:</maml:para>
            <maml:para>	- `PackageIdentifier` 	- `PackageName` 	- `Moniker` 	- `Tags`</maml:para>
            <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Force the uninstall to run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specify the package identifier to search for. By default, the command does a case-insensitive substring match.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Log</maml:name>
          <maml:description>
            <maml:para>Specify the location for the uninstaller log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
            <maml:para>&gt; Note: Not all uninstallers support this option.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>MatchOption</maml:name>
          <maml:description>
            <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values:</maml:para>
            <maml:para>- `Equals`</maml:para>
            <maml:para>- `EqualsCaseInsensitive`</maml:para>
            <maml:para>- `StartsWithCaseInsensitive`</maml:para>
            <maml:para>- `ContainsCaseInsensitive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Equals</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">EqualsCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">StartsWithCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">ContainsCaseInsensitive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mode</maml:name>
          <maml:description>
            <maml:para>Specify the output mode for the installer. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Silent`</maml:para>
            <maml:para>- `Interactive`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; Not all uninstallers support all modes.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Silent</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Interactive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Moniker</maml:name>
          <maml:description>
            <maml:para>Specify the moniker of the WinGet package to download. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the WinGet package name. The name contains space, you must enclose the name in quotes.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specify the name of a configured WinGet source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specify the version of the package to be uninstalled.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Uninstall-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
          <maml:name>PSCatalogPackage</maml:name>
          <maml:description>
            <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` or `Get-WingetPackage` commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Force the uninstall to run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Log</maml:name>
          <maml:description>
            <maml:para>Specify the location for the uninstaller log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
            <maml:para>&gt; Note: Not all uninstallers support this option.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mode</maml:name>
          <maml:description>
            <maml:para>Specify the output mode for the installer. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Silent`</maml:para>
            <maml:para>- `Interactive`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; Not all uninstallers support all modes.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Silent</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Interactive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specify the version of the package to be uninstalled.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Force the uninstall to run.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specify the package identifier to search for. By default, the command does a case-insensitive substring match.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Log</maml:name>
        <maml:description>
          <maml:para>Specify the location for the uninstaller log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
          <maml:para>&gt; Note: Not all uninstallers support this option.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>MatchOption</maml:name>
        <maml:description>
          <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values:</maml:para>
          <maml:para>- `Equals`</maml:para>
          <maml:para>- `EqualsCaseInsensitive`</maml:para>
          <maml:para>- `StartsWithCaseInsensitive`</maml:para>
          <maml:para>- `ContainsCaseInsensitive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Mode</maml:name>
        <maml:description>
          <maml:para>Specify the output mode for the installer. The parameter accepts the following values:</maml:para>
          <maml:para>- `Default`</maml:para>
          <maml:para>- `Silent`</maml:para>
          <maml:para>- `Interactive`</maml:para>
          <maml:para></maml:para>
          <maml:para>&gt; [!NOTE] &gt; Not all uninstallers support all modes.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Moniker</maml:name>
        <maml:description>
          <maml:para>Specify the moniker of the WinGet package to download. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the WinGet package name. The name contains space, you must enclose the name in quotes.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
        <maml:name>PSCatalogPackage</maml:name>
        <maml:description>
          <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` or `Get-WingetPackage` commands.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. Wildcards are not supported. The command compares the value provided to the following package manifest properties:</maml:para>
          <maml:para>	- `PackageIdentifier` 	- `PackageName` 	- `Moniker` 	- `Tags`</maml:para>
          <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specify the name of a configured WinGet source.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Specify the version of the package to be uninstalled.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageUninstallMode</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSUninstallResult</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>--------- Example 1: Uninstall a package using a query ---------</maml:title>
        <dev:code>Uninstall-WinGetPackage Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example show how to uninstall a package using a query. The Query parameter is positional, so you don't need to include the parameter name before the query string.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 2: Uninstall a package by Id -------------</maml:title>
        <dev:code>Uninstall-WinGetPackage -Id Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to uninstall a package by the specifying the package identifier.</maml:para>
          <maml:para>If the package identifier is available from more than one source, you must provide additional search criteria to select a specific instance of the package.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------ Example 3: Uninstall a package by Name ------------</maml:title>
        <dev:code>Uninstall-WinGetPackage -Name "PowerToys (Preview)"</dev:code>
        <dev:remarks>
          <maml:para>This sample uninstalls the PowerToys package by the specifying the package name.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----- Example 4: Uninstall a specific version of a package -----</maml:title>
        <dev:code>Uninstall-WinGetPackage Microsoft.PowerShell -Version 7.4.4.0</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to uninstall a specific version of a package using a query. The command does a query search for packages matching `Microsoft.PowerShell`. The results of the search a limited to matches with the version of `7.4.4.0`.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Install-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
  <command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10" xmlns:MSHelp="http://msdn.microsoft.com/mshelp">
    <command:details>
      <command:name>Update-WinGetPackage</command:name>
      <command:verb>Update</command:verb>
      <command:noun>WinGetPackage</command:noun>
      <maml:description>
        <maml:para>Installs a newer version of a previously installed WinGet package.</maml:para>
      </maml:description>
    </command:details>
    <maml:description>
      <maml:para>This command searches the packages installed on your system and installs a newer version of the matching WinGet package. The command includes parameters to specify values used to search for packages in the configured sources. By default, the command searches all sources. By default, all string-based searches are case-insensitive substring searches. Wildcards are not supported. You can change the search behavior using the MatchOption parameter.</maml:para>
    </maml:description>
    <command:syntax>
      <command:syntaxItem>
        <maml:name>Update-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
          <maml:name>Query</maml:name>
          <maml:description>
            <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. Wildcards are not supported. The command compares the value provided to the following package manifest properties:</maml:para>
            <maml:para>	- `PackageIdentifier` 	- `PackageName` 	- `Moniker` 	- `Tags`</maml:para>
            <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
          <dev:type>
            <maml:name>System.String[]</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllowHashMismatch</maml:name>
          <maml:description>
            <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Architecture</maml:name>
          <maml:description>
            <maml:para>Specify the processor architecture for the WinGet package installer. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `X86`</maml:para>
            <maml:para>- `Arm`</maml:para>
            <maml:para>- `X64`</maml:para>
            <maml:para>- `Arm64`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X86</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X64</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm64</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Custom</maml:name>
          <maml:description>
            <maml:para>Use this parameter to pass additional arguments to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string is added to the arguments defined in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Force the update to run the installer.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Header</maml:name>
          <maml:description>
            <maml:para>Specify a custom value in the HTTP header to the REST source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Id</maml:name>
          <maml:description>
            <maml:para>Specify the package identifier to search for. By default, the command does a case-insensitive substring match.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IncludeUnknown</maml:name>
          <maml:description>
            <maml:para>Use this parameter to upgrade the package when the installed version is not specified in the registry.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>InstallerType</maml:name>
          <maml:description>
            <maml:para>A package may contain multiple installer types. Use this parameter to select the installer you want to use. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Inno`</maml:para>
            <maml:para>- `Wix`</maml:para>
            <maml:para>- `Msi`</maml:para>
            <maml:para>- `Nullsoft`</maml:para>
            <maml:para>- `Zip`</maml:para>
            <maml:para>- `Msix`</maml:para>
            <maml:para>- `Exe`</maml:para>
            <maml:para>- `Burn`</maml:para>
            <maml:para>- `MSStore`</maml:para>
            <maml:para>- `Portable`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Inno</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Wix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msi</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Nullsoft</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Zip</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Exe</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Burn</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">MSStore</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Portable</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Locale</maml:name>
          <maml:description>
            <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Location</maml:name>
          <maml:description>
            <maml:para>Specify the file path where you want the packed to be installed. The installer must be able to support alternate install locations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Log</maml:name>
          <maml:description>
            <maml:para>Specify the location for the installer log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
            <maml:para>&gt; Note: Not all installers support this property.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>MatchOption</maml:name>
          <maml:description>
            <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values:</maml:para>
            <maml:para>- `Equals`</maml:para>
            <maml:para>- `EqualsCaseInsensitive`</maml:para>
            <maml:para>- `StartsWithCaseInsensitive`</maml:para>
            <maml:para>- `ContainsCaseInsensitive`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Equals</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">EqualsCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">StartsWithCaseInsensitive</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">ContainsCaseInsensitive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mode</maml:name>
          <maml:description>
            <maml:para>Specify the output mode for the installer. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Silent`</maml:para>
            <maml:para>- `Interactive`</maml:para>
            <maml:para></maml:para>
            <maml:para>Not all installers support all modes.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Silent</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Interactive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Moniker</maml:name>
          <maml:description>
            <maml:para>Specify the moniker of the WinGet package to update. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Name</maml:name>
          <maml:description>
            <maml:para>Specify the name of the package to be updated.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Override</maml:name>
          <maml:description>
            <maml:para>Use this parameter to override the existing arguments passed to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string overrides the arguments specified in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
            <maml:para>- `Any`</maml:para>
            <maml:para>- `User`</maml:para>
            <maml:para>- `System`</maml:para>
            <maml:para>- `UserOrUnknown`</maml:para>
            <maml:para>- `SystemOrUnknown`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Any</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">User</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">System</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">UserOrUnknown</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">SystemOrUnknown</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipDependencies</maml:name>
          <maml:description>
            <maml:para>Specifies that the command shouldn't install the WinGet package dependencies.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Source</maml:name>
          <maml:description>
            <maml:para>Specify the name of a configured WinGet source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specify package version.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
      <command:syntaxItem>
        <maml:name>Update-WinGetPackage</maml:name>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
          <maml:name>PSCatalogPackage</maml:name>
          <maml:description>
            <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` or `Get-WinGetPackage` commands.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>AllowHashMismatch</maml:name>
          <maml:description>
            <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Architecture</maml:name>
          <maml:description>
            <maml:para>Specify the processor architecture for the WinGet package installer. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `X86`</maml:para>
            <maml:para>- `Arm`</maml:para>
            <maml:para>- `X64`</maml:para>
            <maml:para>- `Arm64`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X86</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">X64</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Arm64</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Custom</maml:name>
          <maml:description>
            <maml:para>Use this parameter to pass additional arguments to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string is added to the arguments defined in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Force</maml:name>
          <maml:description>
            <maml:para>Force the update to run the installer.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Header</maml:name>
          <maml:description>
            <maml:para>Specify a custom value in the HTTP header to the REST source.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>IncludeUnknown</maml:name>
          <maml:description>
            <maml:para>Use this parameter to upgrade the package when the installed version is not specified in the registry.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>InstallerType</maml:name>
          <maml:description>
            <maml:para>A package may contain multiple installer types. Use this parameter to select the installer you want to use. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Inno`</maml:para>
            <maml:para>- `Wix`</maml:para>
            <maml:para>- `Msi`</maml:para>
            <maml:para>- `Nullsoft`</maml:para>
            <maml:para>- `Zip`</maml:para>
            <maml:para>- `Msix`</maml:para>
            <maml:para>- `Exe`</maml:para>
            <maml:para>- `Burn`</maml:para>
            <maml:para>- `MSStore`</maml:para>
            <maml:para>- `Portable`</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Inno</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Wix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msi</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Nullsoft</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Zip</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Msix</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Exe</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Burn</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">MSStore</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Portable</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Locale</maml:name>
          <maml:description>
            <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Location</maml:name>
          <maml:description>
            <maml:para>Specify the file path where you want the packed to be installed. The installer must be able to support alternate install locations.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Log</maml:name>
          <maml:description>
            <maml:para>Specify the location for the installer log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
            <maml:para>&gt; Note: Not all installers support this property.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Mode</maml:name>
          <maml:description>
            <maml:para>Specify the output mode for the installer. The parameter accepts the following values:</maml:para>
            <maml:para>- `Default`</maml:para>
            <maml:para>- `Silent`</maml:para>
            <maml:para>- `Interactive`</maml:para>
            <maml:para></maml:para>
            <maml:para>Not all installers support all modes.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Default</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Silent</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">Interactive</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Override</maml:name>
          <maml:description>
            <maml:para>Use this parameter to override the existing arguments passed to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string overrides the arguments specified in the package manifest.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Scope</maml:name>
          <maml:description>
            <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
            <maml:para>- `Any`</maml:para>
            <maml:para>- `User`</maml:para>
            <maml:para>- `System`</maml:para>
            <maml:para>- `UserOrUnknown`</maml:para>
            <maml:para>- `SystemOrUnknown`</maml:para>
            <maml:para></maml:para>
            <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
          </maml:description>
          <command:parameterValueGroup>
            <command:parameterValue required="false" command:variableLength="false">Any</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">User</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">System</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">UserOrUnknown</command:parameterValue>
            <command:parameterValue required="false" command:variableLength="false">SystemOrUnknown</command:parameterValue>
          </command:parameterValueGroup>
          <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
          <dev:type>
            <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>SkipDependencies</maml:name>
          <maml:description>
            <maml:para>Specifies that the command shouldn't install the WinGet package dependencies.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
          <maml:name>Version</maml:name>
          <maml:description>
            <maml:para>Specify package version.</maml:para>
          </maml:description>
          <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
          <dev:type>
            <maml:name>System.String</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>None</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
          <maml:name>Confirm</maml:name>
          <maml:description>
            <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
        <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
          <maml:name>WhatIf</maml:name>
          <maml:description>
            <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
          </maml:description>
          <dev:type>
            <maml:name>System.Management.Automation.SwitchParameter</maml:name>
            <maml:uri />
          </dev:type>
          <dev:defaultValue>False</dev:defaultValue>
        </command:parameter>
      </command:syntaxItem>
    </command:syntax>
    <command:parameters>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>AllowHashMismatch</maml:name>
        <maml:description>
          <maml:para>Allows you to download package even when the SHA256 hash for an installer or a dependency does not match the SHA256 hash in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Architecture</maml:name>
        <maml:description>
          <maml:para>Specify the processor architecture for the WinGet package installer. The parameter accepts the following values:</maml:para>
          <maml:para>- `Default`</maml:para>
          <maml:para>- `X86`</maml:para>
          <maml:para>- `Arm`</maml:para>
          <maml:para>- `X64`</maml:para>
          <maml:para>- `Arm64`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Custom</maml:name>
        <maml:description>
          <maml:para>Use this parameter to pass additional arguments to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string is added to the arguments defined in the package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Force</maml:name>
        <maml:description>
          <maml:para>Force the update to run the installer.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Header</maml:name>
        <maml:description>
          <maml:para>Specify a custom value in the HTTP header to the REST source.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Id</maml:name>
        <maml:description>
          <maml:para>Specify the package identifier to search for. By default, the command does a case-insensitive substring match.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>IncludeUnknown</maml:name>
        <maml:description>
          <maml:para>Use this parameter to upgrade the package when the installed version is not specified in the registry.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>InstallerType</maml:name>
        <maml:description>
          <maml:para>A package may contain multiple installer types. Use this parameter to select the installer you want to use. The parameter accepts the following values:</maml:para>
          <maml:para>- `Default`</maml:para>
          <maml:para>- `Inno`</maml:para>
          <maml:para>- `Wix`</maml:para>
          <maml:para>- `Msi`</maml:para>
          <maml:para>- `Nullsoft`</maml:para>
          <maml:para>- `Zip`</maml:para>
          <maml:para>- `Msix`</maml:para>
          <maml:para>- `Exe`</maml:para>
          <maml:para>- `Burn`</maml:para>
          <maml:para>- `MSStore`</maml:para>
          <maml:para>- `Portable`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Locale</maml:name>
        <maml:description>
          <maml:para>Specify the locale of the installer package. The locale must provided in the BCP 47 format, such as `en-US`. For more information, see Standard locale names (/globalization/locale/standard-locale-names).</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Location</maml:name>
        <maml:description>
          <maml:para>Specify the file path where you want the packed to be installed. The installer must be able to support alternate install locations.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Log</maml:name>
        <maml:description>
          <maml:para>Specify the location for the installer log. The value can be a fully-qualified or relative path and must include the file name. For example: `$env:TEMP\package.log`.</maml:para>
          <maml:para>&gt; Note: Not all installers support this property.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>MatchOption</maml:name>
        <maml:description>
          <maml:para>Specify the match option for a WinGet package query. This parameter accepts the following values:</maml:para>
          <maml:para>- `Equals`</maml:para>
          <maml:para>- `EqualsCaseInsensitive`</maml:para>
          <maml:para>- `StartsWithCaseInsensitive`</maml:para>
          <maml:para>- `ContainsCaseInsensitive`</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Mode</maml:name>
        <maml:description>
          <maml:para>Specify the output mode for the installer. The parameter accepts the following values:</maml:para>
          <maml:para>- `Default`</maml:para>
          <maml:para>- `Silent`</maml:para>
          <maml:para>- `Interactive`</maml:para>
          <maml:para></maml:para>
          <maml:para>Not all installers support all modes.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Moniker</maml:name>
        <maml:description>
          <maml:para>Specify the moniker of the WinGet package to update. For example, the moniker for the Microsoft.PowerShell package is `pwsh`.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Name</maml:name>
        <maml:description>
          <maml:para>Specify the name of the package to be updated.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Override</maml:name>
        <maml:description>
          <maml:para>Use this parameter to override the existing arguments passed to the installer. The parameter takes a single string value. To add multiple arguments, include the arguments in the string. The arguments must be provided in the format expected by the installer. If the string contains spaces, it must be enclosed in quotes. This string overrides the arguments specified in the package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="0" aliases="InputObject">
        <maml:name>PSCatalogPackage</maml:name>
        <maml:description>
          <maml:para>Provide PSCatalogPackage object. You can get a PSCatalogPackage object by using the `Find-WinGetPackage` or `Get-WinGetPackage` commands.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="0" aliases="none">
        <maml:name>Query</maml:name>
        <maml:description>
          <maml:para>Specify one or more strings to search for. By default, the command searches all configured sources. Wildcards are not supported. The command compares the value provided to the following package manifest properties:</maml:para>
          <maml:para>	- `PackageIdentifier` 	- `PackageName` 	- `Moniker` 	- `Tags`</maml:para>
          <maml:para>The command does a case-insensitive substring comparison of these properties.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String[]</command:parameterValue>
        <dev:type>
          <maml:name>System.String[]</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Scope</maml:name>
        <maml:description>
          <maml:para>Specify WinGet package installer scope. The parameter accepts the following values:</maml:para>
          <maml:para>- `Any`</maml:para>
          <maml:para>- `User`</maml:para>
          <maml:para>- `System`</maml:para>
          <maml:para>- `UserOrUnknown`</maml:para>
          <maml:para>- `SystemOrUnknown`</maml:para>
          <maml:para></maml:para>
          <maml:para>&gt; [!NOTE] &gt; The installer scope must be available in the WinGet package manifest.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</command:parameterValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>SkipDependencies</maml:name>
        <maml:description>
          <maml:para>Specifies that the command shouldn't install the WinGet package dependencies.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Source</maml:name>
        <maml:description>
          <maml:para>Specify the name of a configured WinGet source.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="True (ByPropertyName)" position="named" aliases="none">
        <maml:name>Version</maml:name>
        <maml:description>
          <maml:para>Specify package version.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.String</command:parameterValue>
        <dev:type>
          <maml:name>System.String</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>None</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="cf">
        <maml:name>Confirm</maml:name>
        <maml:description>
          <maml:para>Prompts you for confirmation before running the cmdlet.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
      <command:parameter required="false" variableLength="true" globbing="false" pipelineInput="False" position="named" aliases="wi">
        <maml:name>WhatIf</maml:name>
        <maml:description>
          <maml:para>Shows what would happen if the cmdlet runs. The cmdlet isn't run.</maml:para>
        </maml:description>
        <command:parameterValue required="true" variableLength="false">System.Management.Automation.SwitchParameter</command:parameterValue>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
          <maml:uri />
        </dev:type>
        <dev:defaultValue>False</dev:defaultValue>
      </command:parameter>
    </command:parameters>
    <command:inputTypes>
      <command:inputType>
        <dev:type>
          <maml:name>System.Management.Automation.SwitchParameter</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallMode</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSProcessorArchitecture</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallerType</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageInstallScope</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSCatalogPackage</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>System.String[]</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
      <command:inputType>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.PSObjects.PSPackageFieldMatchOption</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:inputType>
    </command:inputTypes>
    <command:returnValues>
      <command:returnValue>
        <dev:type>
          <maml:name>Microsoft.WinGet.Client.Engine.PSObjects.PSInstallResult</maml:name>
        </dev:type>
        <maml:description>
          <maml:para></maml:para>
        </maml:description>
      </command:returnValue>
    </command:returnValues>
    <maml:alertSet>
      <maml:alert>
        <maml:para></maml:para>
      </maml:alert>
    </maml:alertSet>
    <command:examples>
      <command:example>
        <maml:title>---------- Example 1: Update a package using a query ----------</maml:title>
        <dev:code>Update-WinGetPackage Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example show how to update a package using a query. The Query parameter is positional, so you don't need to include the parameter name before the query string.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>-------------- Example 2: Update a package by Id --------------</maml:title>
        <dev:code>Update-WinGetPackage -Id Microsoft.PowerShell</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to update a package by the specifying the package identifier.</maml:para>
          <maml:para>If the package identifier is available from more than one source, you must provide additional search criteria to select a specific instance of the package.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>------------- Example 3: Update a package by Name -------------</maml:title>
        <dev:code>Update-WinGetPackage -Name "PowerToys (Preview)"</dev:code>
        <dev:remarks>
          <maml:para>This sample updates the PowerToys package by the specifying the package name.</maml:para>
        </dev:remarks>
      </command:example>
      <command:example>
        <maml:title>----- Example 4: Update to a specific version of a package -----</maml:title>
        <dev:code>Update-WinGetPackage Microsoft.PowerShell -Version 7.4.4.0</dev:code>
        <dev:remarks>
          <maml:para>This example shows how to update a specific version of a package using a query. The command does a query search for packages matching `Microsoft.PowerShell`. The results of the search a limited to matches with the version of `7.4.4.0`.</maml:para>
        </dev:remarks>
      </command:example>
    </command:examples>
    <command:relatedLinks>
      <maml:navigationLink>
        <maml:linkText>Get-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
      <maml:navigationLink>
        <maml:linkText>Uninstall-WinGetPackage</maml:linkText>
        <maml:uri></maml:uri>
      </maml:navigationLink>
    </command:relatedLinks>
  </command:command>
</helpItems>